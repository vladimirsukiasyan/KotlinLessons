fun main(args: Array<String>){
    //--------------------Статический массив--------------------//
    val intArray = IntArray(10)
    //создает статический массив типа Int с размером в 10
    //эквивалентно типу int[] в Java, C++, C
    //по умолчанию присваивает всем элементам 0
    val intArray1 = intArrayOf(0,1,23,-43,5,23,-3,13,0)
    // другой способ создания
    // создает статический массив типа Int со значениями, указанными в скобках.
    // Такой конструктор массива называется инициализирующий. Он принимает неограниченное число елементов на момент создания

    println(intArray.javaClass.typeName == intArray1.javaClass.typeName) // true. типы одинаковы
    intArray[0] = 5
    intArray1.set(index = 0, value = 5) // эквивалентные строчки
//    intArray1[10] = 5 // ошибка! Массив - статический. Размер массива - 10 элементов, не больше

    val bArray = booleanArrayOf(true, false, false, true)
    val cArray = charArrayOf('a','b','c')
    val fArray = floatArrayOf(1f,2f,4.2f)

    /**
     * Для создания массива мы можем использовать библиотечную функцию arrayOf(),
     * которой в качестве аргумента передаются элементы массива, т.е. выполнение arrayOf(1, 2, 3)
     * создаёт массив [1, 2, 3]. С другой стороны библиотечная функция arrayOfNulls()
     * может быть использована для создания массива заданного размера, заполненного значениями null.
     */
    //Функция сама посчитает их количество, которое потом мы можем узнать через свойство массива size.
    val numbers = arrayOf(1,2,3,4,5)
    // создаёт массив типа Array<Int>
    println(numbers.size) //  5

    // создаёт массив типа Array<String>
    val hellos = arrayOf("Hi","Привет","Adios")

    //Способ создания массива при помощи лямба-выражения, который является по сути генератором
    //создаёт массив типа Array<Int> со значениями [0, 1, 4, 9, 16]. Тип в Java - Integer[]
    val squares = Array(5) { i -> i * i }

    // А можно еще так. Тип в Java - int[]
    val squares1 = IntArray(5) { i -> i * i }

    //Создание двумерного массива
    val table: Array<Array<Int>> = Array(3) { Array(5, {0}) }
    table[0] = arrayOf(1, 2, 3)
    table[1] = arrayOf(4, 5, 6)
    table[2] = arrayOf(7, 8, 9)
    /**
     * Для обращения к элементам подмассивов двухмерного массива необходимы два индекса.
     * По первому индексу идет получение строки, а по второму индексу - столбца в рамках этой строки:
     */
    table[0][1] = 6  // второй элемент первой строки
    val n = table[0][1]     // n = 6

    //--------------------Динамический массив--------------------//

    val dynamicArray = arrayListOf(1,2,3)
    val dynamicArray2 = arrayListOf(1,2,3,4,5,5,6,6,7,78,8,6)
    //Если значения не указываем - то нужно указать тип в параметре шаблона
    val dynamicIntArray = arrayListOf<Int>()

    //Добавление
    dynamicArray.add(3)

    //Увеличивает емкость дин.массива, если это необходимо, так,
    //чтобы вместить в себе указываемое в параметрах кол-во элементов
    dynamicArray.ensureCapacity(10)

    //добавляет к первому массиву все элементы из второго
    dynamicArray.addAll(dynamicArray2)

    //Уменьшает емкость массива до его размера (т.е реального кол-ва лежащих в нем эл-ов)
    dynamicArray.trimToSize()
}
